/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package capacitores;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.Timer;

/**
 *
 * @author alberto
 */
public class Informacion extends javax.swing.JFrame {

    /**
     * Creates new form Informacion
     */
    public Informacion() {
        initComponents();
          setLocationRelativeTo(null);
          setResizable(false);
        tiposCapacitores.addItem("¿Que es un capacitor?");
        tiposCapacitores.addItem("¿De que consta un capacitor?");
        tiposCapacitores.addItem("Capacitores en serie");
        tiposCapacitores.addItem("Capacitores en paralelo");
        tiposCapacitores.addItem("Coeficientes de permitividad");
        tiposCapacitores.addItem("Capacitores de cerámica");
        tiposCapacitores.addItem("Capacitores de cerámica");
        tiposCapacitores.addItem("Capacitores de lámina de plástico");
        tiposCapacitores.addItem("Capacitores de poliester");
        tiposCapacitores.addItem("Capacitores electrolíticos");
        tiposCapacitores.addItem("Capacitores de pelicula");
        tiposCapacitores.addItem("Super capacitores");
                        Date sistfecha= new Date();
        SimpleDateFormat formato= new SimpleDateFormat("dd-MMM-YYYY");
        jLabel2.setText(formato.format(sistfecha));
        Timer tiempo=new Timer(100, new Informacion.horas());
        tiempo.start();

    }
         class horas implements ActionListener{

        @Override
        public void actionPerformed(ActionEvent e) {
            Date sisHora=new Date();
            String pmAm="hh:mm:ss a";
            SimpleDateFormat format=new SimpleDateFormat(pmAm);
            Calendar hoy=Calendar.getInstance();
           jLabel3.setText(String.format(format.format(sisHora),hoy));

        }
    

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tiposCapacitores = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        Imagen = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tiposCapacitores.setBackground(java.awt.Color.gray);
        tiposCapacitores.setFont(new java.awt.Font("Ubuntu", 2, 18)); // NOI18N
        tiposCapacitores.setForeground(java.awt.Color.white);
        tiposCapacitores.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Eliga una opcion" }));
        tiposCapacitores.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tiposCapacitoresItemStateChanged(evt);
            }
        });
        tiposCapacitores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tiposCapacitoresActionPerformed(evt);
            }
        });
        jPanel1.add(tiposCapacitores, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, 230, 50));

        jLabel1.setBackground(new java.awt.Color(102, 102, 102));
        jLabel1.setFont(new java.awt.Font("Ubuntu", 3, 18)); // NOI18N
        jLabel1.setForeground(java.awt.Color.white);
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 60, 540, 330));

        jLabel2.setFont(new java.awt.Font("Verdana", 3, 18)); // NOI18N
        jLabel2.setText("jLabel1");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel3.setFont(new java.awt.Font("Verdana", 3, 18)); // NOI18N
        jLabel3.setText("jLabel1");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 0, -1, -1));

        jButton1.setBackground(java.awt.Color.gray);
        jButton1.setFont(new java.awt.Font("Ubuntu", 2, 15)); // NOI18N
        jButton1.setForeground(java.awt.Color.white);
        jButton1.setText("Regresar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));
        jPanel1.add(Imagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 350, 510, 230));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/32802377-dibujo-de-circuitos-electrónicos-modernos-en-el-fondo-azul.jpg"))); // NOI18N
        jLabel4.setText("jLabel3");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 29, 1000, 570));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tiposCapacitoresItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tiposCapacitoresItemStateChanged
        String tipos = (String) tiposCapacitores.getSelectedItem();
        if (tipos.equals("¿Que es un capacitor?")) {
         jLabel1.setText("<html>Un capacitor o condensador eléctrico es un dispositivo empleado para almacenar cargas eléctricas Por definición: Un capacitor tiene la capacidad de un faraday cuando al almacenar la carga de un coulomb su potencial aumenta un volt Un faraday = Un coulomb / Un volt.<html>");
    ImageIcon imagen = new ImageIcon(getClass().getResource("/imagenes/capacitor1.jpeg"));
         Icon fondoUno = new ImageIcon(imagen.getImage().getScaledInstance(Imagen.getWidth(), Imagen.getHeight(),Image.SCALE_DEFAULT));
        Imagen.setIcon(fondoUno);
        this.repaint();

        }
        if (tipos.equals("¿De que consta un capacitor?")) {
         jLabel1.setText("<html>Un capacitor básico, consta de dos laminas metálicas separadas por un aislante o dieléctrico que puede ser aire, vidrio, mica aceite o papel encerado..<html>");
ImageIcon imagen = new ImageIcon(getClass().getResource("/imagenes/cap2.png"));
         Icon fondoUno = new ImageIcon(imagen.getImage().getScaledInstance(Imagen.getWidth(), Imagen.getHeight(),Image.SCALE_DEFAULT));
        Imagen.setIcon(fondoUno);
        this.repaint();

        }
        if (tipos.equals("Capacitores en serie")) {
         jLabel1.setText("<html>1/Ce=1/C + 1/C + 1/C + .... + 1/Cn  En una conexión en serie los capacitores adquieren la misma carga: Q=CV y el valor de la diferencia de potencial sera igual a todos los voltajes: V=V+V+V+....+Vn.<html>");
ImageIcon imagen = new ImageIcon(getClass().getResource("/imagenes/cap3.png"));
         Icon fondoUno = new ImageIcon(imagen.getImage().getScaledInstance(Imagen.getWidth(), Imagen.getHeight(),Image.SCALE_DEFAULT));
        Imagen.setIcon(fondoUno);
        this.repaint();

        }
        if (tipos.equals("Capacitores en paralelo")) {
         jLabel1.setText("<html>C=C+C+C+.....+Cn  Al conectar los capacitores en paralelo, cada uno de ellos tendra la misma diferencia de potencial V equivalente a: V=Q/C ademas el valor de la carga total almacenada sera igual a todos los capacitores Q=Q+Q+Q+....+Qn.<html>");
ImageIcon imagen = new ImageIcon(getClass().getResource("/imagenes/cap4.png"));
         Icon fondoUno = new ImageIcon(imagen.getImage().getScaledInstance(Imagen.getWidth(), Imagen.getHeight(),Image.SCALE_DEFAULT));
        Imagen.setIcon(fondoUno);
        this.repaint();

        }
        if (tipos.equals("Coeficientes de permitividad")) {
         jLabel1.setText("<html>Los valores de la permetividad relativa o coeficiente dieléctrico εr de algunas sustancias asilantes ya están dados.<html>");
ImageIcon imagen = new ImageIcon(getClass().getResource("/imagenes/cap5.png"));
         Icon fondoUno = new ImageIcon(imagen.getImage().getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(),Image.SCALE_DEFAULT));
        Imagen.setIcon(fondoUno);
        this.repaint();

        }

        if (tipos.equals("Capacitores de cerámica")) {
         jLabel1.setText("<html>Son capacitores en donde las indictancias parásitas y las pérdidas son casi nulas. La constante dieléctrica de estos elementos es muy alta (de 1000 a 10,000 veces la del aire) – Algunos tipos de cerámica permiten una alta permitividad y se alcanza altos valores de capacitancia en tamaños pequeños, pero tienen el inconveniente que son muy sensibles a la temperatura y a las variaciones de voltaje. – Hay otros tipos de cerámica que tienen un valor de permitividad menor, pero que su sensibilidad a la temperatura, voltaje y el tiempo es despreciable. Estos capacitores tienen un tamaño mayores que los otros de cerámica. Se fabrican en valores de fracciones de picoFaradios (pF) hasta nanoFaradios (nF).<html>");
ImageIcon imagen = new ImageIcon(getClass().getResource("/imagenes/imagenUno.jpg"));
         Icon fondoUno = new ImageIcon(imagen.getImage().getScaledInstance(Imagen.getWidth(), Imagen.getHeight(),Image.SCALE_DEFAULT));
        Imagen.setIcon(fondoUno);
        this.repaint();

        }
        if (tipos.equals("Capacitores electrolíticos")) {
        jLabel1.setText("<html>Estos capacitores pueden tener capacitancias muy altas a un precio razonablemente bajo. Tienen el inconveniente de que tienen alta corriente de fuga y un voltaje de ruptura bajo. Son polarizados y hay que tener cuidado a hora de conectarlos pues pueden estallar si se conectan con la polaridad invertida. Se utilizan principalmente en fuentes de alimentación. <html>");
ImageIcon imagen = new ImageIcon(getClass().getResource("/imagenes/Electrolitos.jpg"));
        Icon fondoUno = new ImageIcon(imagen.getImage().getScaledInstance(Imagen.getWidth(), Imagen.getHeight(),Image.SCALE_DEFAULT));
        Imagen.setIcon(fondoUno);
        this.repaint();

        }
        if (tipos.equals("Capacitores de lámina de plástico")) {
            jLabel1.setText("<html>láminas de plástico y láminas metálicas intercaladas:Estos tipos de capacitores son generalmente más grandes que los de lámina metalizada, pero tienen una capacitancia más estable y mejor aislamiento. –Lámina metalizada:Tiene la lámina metálica depositada directamente en la lámina de plástico. Estos capacitores tienen la cualidad de protegerse a si mismos contra sobre voltajes. Cuando esto ocurre aparece un arco de corriente que evapora el metal eliminando el defecto.<html>");
ImageIcon imagen = new ImageIcon(getClass().getResource("/imagenes/imagenDos.jpg"));
            Icon fondoUno = new ImageIcon(imagen.getImage().getScaledInstance(Imagen.getWidth(), Imagen.getHeight(),Image.SCALE_DEFAULT));
        Imagen.setIcon(fondoUno);
        this.repaint();

        }
        if (tipos.equals("Capacitores de poliester")) {
            jLabel1.setText("<html>Sustituyen a los capacitores de papel, solo que el dieléctrico es el poliéster. Se crearon capacitores de poliéster metalizado con el fin de reducir las dimensiones físicas. Ventajas: muy poca pérdida y excelente factor de potencia.<html>");
ImageIcon imagen = new ImageIcon(getClass().getResource("/imagenes/poliester.jpg"));
        Icon fondoUno = new ImageIcon(imagen.getImage().getScaledInstance(Imagen.getWidth(), Imagen.getHeight(),Image.SCALE_DEFAULT));
        Imagen.setIcon(fondoUno);
        this.repaint();
        }
        if (tipos.equals("Super capacitores")) {
            jLabel1.setText("<html>Estos capacitores son como los electrolíticos pero almacenan miles de veces más la energía, los convencionales por los regular están en el orden de los micro-faradios y estos super-capacitores pueden llegar al orden de los 3,000 faradios.<html>");
ImageIcon imagen = new ImageIcon(getClass().getResource("/imagenes/supercap.jpg"));
        Icon fondoUno = new ImageIcon(imagen.getImage().getScaledInstance(Imagen.getWidth(), Imagen.getHeight(),Image.SCALE_DEFAULT));
        Imagen.setIcon(fondoUno);
        this.repaint();
        }
        if (tipos.equals("Capacitores de pelicula")) {
            jLabel1.setText("<html>El material utilizado para este capacitor es el plástico, son no polarizados  y tienen un capacidad de autoreparación, se utilizan principalmente en aplicaciones de audio.<html>");
        ImageIcon imagen = new ImageIcon(getClass().getResource("/imagenes/pelicula.jpg"));
        Icon fondoUno = new ImageIcon(imagen.getImage().getScaledInstance(Imagen.getWidth(), Imagen.getHeight(),Image.SCALE_DEFAULT));
        Imagen.setIcon(fondoUno);
        this.repaint();
        }
    }//GEN-LAST:event_tiposCapacitoresItemStateChanged

    private void tiposCapacitoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tiposCapacitoresActionPerformed

    }//GEN-LAST:event_tiposCapacitoresActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Eleccion().setVisible(true);
            }
        });
 dispose();// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Informacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Informacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Informacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Informacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Informacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Imagen;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox tiposCapacitores;
    // End of variables declaration//GEN-END:variables
}
